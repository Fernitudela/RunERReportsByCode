<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FTDERGenericExecutionService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

class FTDERGenericExecutionService
{
    private FTDERFileDestinationStream fileDestinationStream;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeERReport</Name>
				<Source><![CDATA[
    public void executeERReport(FTDERGenericExecutionDataContract _contract)
    {
        if (_contract.parmFormatMappingId())
        {
            try
            {
                this.generateERReport(_contract);

                if (this.retrieveStream())
                {
                    this.postExecutionHandleStream(_contract);
                }
            }
            catch
            {
                error("@SYP4861341");
            }
        }
        else
        {
            warning(strFmt("@SYS26332", new SysDictType(extendedTypeNum(ERFormatMappingId)).label()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// If you override this method to return true in the child class, make sure you implement the appropiate logic in the method
    /// doHandleStream(), where you will receive back the stream of the generated file.
    /// </summary>
    /// <returns></returns>
    public boolean retrieveStream()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doHandleStream</Name>
				<Source><![CDATA[
    public void doHandleStream(System.IO.Stream _fileStream, str _filepath, FTDERGenericExecutionDataContract _dataContract)
    {
        //This code will be executed if retrieveStrem() returns true.
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToPDF</Name>
				<Source><![CDATA[
    public boolean convertToPDF()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceRunDraft</Name>
				<Source><![CDATA[
    public boolean forceRunDraft()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfolog</Name>
				<Source><![CDATA[
    public boolean showInfolog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipConfiguredDestinations</Name>
				<Source><![CDATA[
    public boolean skipConfiguredDestinations()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPromptDialog</Name>
				<Source><![CDATA[
    public boolean showPromptDialog(NoYes _showDestination)
    {
        return _showDestination == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateERReport</Name>
				<Source><![CDATA[
    private void generateERReport(FTDERGenericExecutionDataContract _contract)
    {
        ERIFormatMappingRun formatMappingRun = this.createFormatMappingRun(_contract);

        if (_contract.parmUncheckXDS())
        {
            //unchecking this will prevent any policy query to be executed and so causing an error.
            //That's needed because some users don't have access to the
            //DocuRef and then the execution of file templates like excel would fail
            unchecked(Uncheck::XDS)
            {
                formatMappingRun.run();
            }
        }
        else
        {
            formatMappingRun.run();
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormatMappingRun</Name>
				<Source><![CDATA[
    private ERIFormatMappingRun createFormatMappingRun(FTDERGenericExecutionDataContract _contract)
    {
        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(
                    _contract.parmFormatMappingId(),
                    _contract.parmFileName(),
                    this.showPromptDialog(_contract.parmShowDestination()),
                    this.showInfolog(),
                    this.forceRunDraft()).withParameter(this.mapDataContractToERParam(_contract));

        formatMappingRun.withShowBatchTab(false);
        formatMappingRun.withShowDestinationTab(_contract.parmShowDestination() == NoYes::Yes);

        if (this.skipConfiguredDestinations())
        {
            this.setUsePrintDestinationsToFalse(formatMappingRun);
        }

        if (this.retrieveStream())
        {
            fileDestinationStream = new FTDERFileDestinationStream();
            fileDestinationStream.parmConvertToPDF(true);

            formatMappingRun.withFileDestination(fileDestinationStream);
        }

        return formatMappingRun;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getStreamAndFilePath</Name>
				<Source><![CDATA[
    private container getStreamAndFilePath()
    {
        System.IO.Stream streamRet;
        str filepath;

        if (this.retrieveStream() 
            && fileDestinationStream)
        {
            streamRet = fileDestinationStream.getFileStream();
            filepath = fileDestinationStream.getFilePath();
        }       

        return [streamRet, filepath];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postExecutionHandleStream</Name>
				<Source><![CDATA[
    private void postExecutionHandleStream(FTDERGenericExecutionDataContract _dataContract)
    {
        System.IO.Stream streamRet;
        str filepath;

        [streamRet, filepath] = this.getStreamAndFilePath();

        this.doHandleStream(streamRet, filepath, _dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataContractToERParam</Name>
				<Source><![CDATA[
    private ERIModelDefinitionParamsAction mapDataContractToERParam(FTDERGenericExecutionDataContract _contract)
    {
        return new ERModelDefinitionParamsUIActionComposite()
                    .add(new ERModelDefinitionObjectParameterAction(_contract.parmModelDsName(), _contract.parmParametersDsName(), _contract, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUsePrintDestinationsToFalse</Name>
				<Source><![CDATA[
    /// <summary>
    /// BP Deviation Documented
    /// We need to access this intricate way to the parmUseDestinations() method because it is not contained in the ERIFormatMappingRun
    /// interface. To access it safely, we check that the method exists in the ERFormatMappingRun with the aim of having a build error in 
    /// case it is renamed or deleted.
    /// </summary>
    /// <param name = "_formatMappingRun">_formatMappingRun</param>
    private void setUsePrintDestinationsToFalse(ERIFormatMappingRun _formatMappingRun)
    {
        //BP Deviation Documented
        Object formatMappingRunObject = _formatMappingRun;
        DictClass dictClass = new DictClass(classIdGet(_formatMappingRun));
        MethodName methodName = methodStr(ERFormatMappingRun, parmUseDestinations);

        if (objectHasMethod(_formatMappingRun, methodName))
        {
            DictMethod dictMethod = new DictMethod(UtilElementType::ClassInstanceMethod, dictClass.id(), methodName);

            if (FTDUtils::checkMethodParameters(dictMethod, conNull(), dictClass.name()))
            {
                formatMappingRunObject.parmUseDestinations(false);
            }
            else
            {
                throw Exception::Error;
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>